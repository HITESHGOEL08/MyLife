{"version":3,"sources":["reportWebVitals.ts","services/googleAnalyticsService/index.tsx","logo.svg","screens/mainApp/App.tsx","screens/tempApp/TempApp.tsx","routes/Routes.tsx","redux/rootReducer.tsx","redux/rootSaga.tsx","redux/configureStore.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","googleAnalyticsService","initGA","ReactGA","initialize","gaOptions","userId","Math","random","toString","slice","name","testMode","App","className","src","logo","alt","TempApp","Routes","basename","exact","path","rootReducer","combineReducers","rootSaga","all","initialState","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gBCNDQ,EAAb,kCAAaA,EAEFC,OAAS,WAEZC,IAAQC,WAAW,iBAAkB,CACjCC,UAAW,CACPC,OAAQC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GACzCC,KAAMJ,KAAKC,SAASC,SAAS,IAAIC,MAAM,IAE3CE,UAAU,K,2BCZP,MAA0B,iC,eCkB1BC,MAdf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,2F,MCSOC,MAdf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,mDACoB,uBADpB,iCCHKE,G,MAAS,WAElB,OACI,mCACI,cAAC,IAAD,CAAQC,SAAS,IAAjB,SACI,qBAAKN,UAAU,iBAAf,SAEI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,iB,gBClBfC,EAAcC,YAAgB,I,oCCA1BC,GAAV,SAAUA,IAAV,iEACH,OADG,SACGC,YAAI,IADP,uCCIP,IAAMC,EAAsB,GCG5B1B,EAAuBC,SAEvB,IAAM0B,EDJwB,WAE1B,IAAMC,EAAiBC,cACjBF,EAAQG,YACVR,EAAaI,EAAcK,YAAgBH,IAG/C,OADAA,EAAeI,IAAIR,GACZG,ECHGM,GAEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1B/C,M","file":"static/js/main.730daefb.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport ReactGA from \"react-ga\"\n\nexport class googleAnalyticsService {\n\n    static initGA = () => {\n\n        ReactGA.initialize(\"UA-175785716-1\", {\n            gaOptions: {\n                userId: Math.random().toString(36).slice(2),\n                name: Math.random().toString(36).slice(2)\n            },\n            testMode: false\n        })\n\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hola Hitesh!!!!!!!!! \n          Wooo HOOOOOOOOOOOOOOOOOOOOOOOOO\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\n\nfunction TempApp() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Welcome People!!!!<br />\n          Site Under Process!!!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default TempApp;\n","import React from \"react\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport App from \"../screens/mainApp/App\"\nimport TempApp from \"../screens/tempApp/TempApp\"\nimport \"./Routes.scss\"\n\nexport const Routes = () => {\n\n    return (\n        <>\n            <Router basename=\"/\" >\n                <div className=\"app-outer-loop\">\n\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <TempApp />\n                        </Route>\n                        <Route path=\"/home\">\n                            <App />\n                        </Route>\n                        <Route path=\"*\">\n                            <TempApp />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </>\n    )\n}","import { combineReducers } from \"redux\";\n\n\nexport const rootReducer = combineReducers({\n\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","import { all } from \"redux-saga/effects\"\n\n\nexport function* rootSaga() {\n    yield all([])\n}","import { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\"\nimport { rootReducer } from \"./rootReducer\";\nimport { rootSaga } from \"./rootSaga\";\n\ntype State = {}\n\nconst initialState: State = {}\nexport const configureStore = () => {\n\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        rootReducer, initialState, applyMiddleware(sagaMiddleware)\n    );\n    sagaMiddleware.run(rootSaga);\n    return store\n\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\nimport { googleAnalyticsService } from './services/googleAnalyticsService';\nimport { Provider } from \"react-redux\"\nimport { Routes } from './routes/Routes';\nimport { configureStore } from './redux/configureStore';\n\ngoogleAnalyticsService.initGA()\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}